;; .emacs
(add-to-list 'default-frame-alist '(height . 55))
(add-to-list 'default-frame-alist '(width . 225))
;(set-face-attribute 'default nil :font "Monospace 10")

; Setup load paths
;
(setq load-path
    (append (list
             nil
             "~/share/emacs/site-lisp"
             "~/share/emacs/site-lisp/neotree")
        load-path))

(setq org-agenda-files (list "~/org/work.org"
                             "~/org/school.org"
                             "~/org/home.org"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; General Editor Configuration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Ensure region selection highlighting is on
(transient-mark-mode)

; just spaces by default
(setq-default indent-tabs-mode nil)

; follow symlinks automatically
(setq-default vc-follow-symlinks nil)

; Put all autosave files `*~` in ~/.emacs/backups
(defvar --backup-directory (concat user-emacs-directory "backups"))
(if (not (file-exists-p --backup-directory))
        (make-directory --backup-directory t))
(setq backup-directory-alist `(("." . ,--backup-directory)))
(setq make-backup-files t               ; backup of a file the first time it is saved.
      backup-by-copying t               ; don't clobber symlinks
      version-control t                 ; version numbers for backup files
      delete-old-versions t             ; delete excess backup files silently
      delete-by-moving-to-trash t
      kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
      kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
      auto-save-default t               ; auto-save every buffer that visits a file
      auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
      auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
      )



; Turn on line numbers
(global-linum-mode 1)

; interpret and use ansi color codes in shell output windows
(ansi-color-for-comint-mode-on)

; I hate trailing whitespace so always delete it
(add-hook 'before-save-hook 'delete-trailing-whitespace)

; I also REALLY hate tabs - Add a on-write hook to kill all tabs that
; there could ever be, unless of course we say to keep them
(add-hook 'write-file-hooks
          (lambda () (if (not indent-tabs-mode)
                         (untabify (point-min) (point-max)))
            nil ))


; Make completion buffers disappear after 3 seconds.
(add-hook 'completion-setup-hook
  (lambda () (run-at-time 3 nil
    (lambda () (delete-windows-on "*Completions*")))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Libs
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Old C Stuff
;;
;; (require 'xcscope)
;; (setq cscope-initial-directory "/yggnfs/hhicks/kusp/kernel-clean/kusp-unstable")

;; ; Emacs tags search
;; ;
;; (setq tags-table-list '("/yggnfs/hhicks/kusp/kernel-clean/kusp-unstable"
;;                      "/yggnfs/hhicks/kusp/kusp"))
;; (require 'etags-table)
;; (setq etags-table-search-up-depth 10)

; Docker
(require 'dockerfile-mode)

; Set Color Theme to sometlshing that does not feel like a nuclear fire
; on my retinas.
(require 'color-theme)
(color-theme-initialize)
(color-theme-charcoal-black)

; Support for cmake files
(require 'cmake-mode)

; Support markdown mark-up sytanx files
(require 'markdown-mode)

; Support for wiki pages
(require 'mediawiki)

; Highlight (or lowlight) the current line
(require 'highlight-current-line)
(highlight-current-line-on t)
(highlight-current-line-set-bg-color "black")


; Make sure that each buffer is unique such that multiple makefiles
; will be prefixed by the directory and such.
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)

(require 'yaml-mode)

; directory tree with toggle
(require 'neotree)
(global-set-key [f8] 'neotree-toggle)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Extension Functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun uniquify-all-lines-region (start end)
  "Find duplicate lines in region START to END keeping first occurrence."
  (interactive "*r")
  (save-excursion
    (let ((lines) (end (copy-marker end)))
      (goto-char start)
      (while (and (< (point) (marker-position end))
                  (not (eobp)))
        (let ((line (buffer-substring-no-properties
                     (line-beginning-position) (line-end-position))))
          (if (member line lines)
              (delete-region (point) (progn (forward-line 1) (point)))
            (push line lines)
            (forward-line 1)))))))

; src: https://sites.google.com/site/steveyegge2/my-dot-emacs-file
(defun rename-file-and-buffer (new-name)
 "Renames both current buffer and file it's visiting to NEW-NAME." (interactive "sNew name: ")
 (let ((name (buffer-name))
       (filename (buffer-file-name)))
   (if (not filename)
       (message "Buffer '%s' is not visiting a file!" name)
     (if (get-buffer new-name)
         (message "A buffer named '%s' already exists!" new-name)
       (progn (rename-file name new-name 1)
              (rename-buffer new-name)
              (set-visited-file-name new-name)
              (set-buffer-modified-p nil)))))) ;;

; src: https://sites.google.com/site/steveyegge2/my-dot-emacs-file
(defun move-buffer-file (dir)
  "Moves both current buffer and file it's visiting to DIR." (interactive "DNew directory: ")
  (let* ((name (buffer-name))
         (filename (buffer-file-name))
         (dir
         (if (string-match dir "\\(?:/\\|\\\\)$")
         (substring dir 0 -1) dir))
         (newname (concat dir "/" name)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Language Specific Overrides
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;
; Python
;;;;;;;;;;;;;;;;;;;;;;;;;
(add-to-list 'auto-mode-alist '("\\.pyx\\'" . cython-mode))
(define-derived-mode cython-mode python-mode "Cython"
  (font-lock-add-keywords
   nil
   `((concat "\\<\\(NULL"
               "\\|c\\(def\\|har\\|typedef\\)"
               "\\|e\\(num\\|xtern\\)"
               "\\|float"
               "\\|in\\(clude\\|t\\)"
               "\\|object\\|public\\|struct\\|type\\|union\\|void"
               "\\)\\>")
      1 font-lock-keyword-face t)))


;;;;;;;;;;;;;;;;;;;;;;;;;
; C
;;;;;;;;;;;;;;;;;;;;;;;;;
(add-hook 'c-mode-common-hook
          (lambda ()
            (c-set-style "linux")))

(add-hook 'c-mode-common-hook
          (lambda ()
            (setq tab-width 8)))

;;;;;;;;;;;;;;;;;;;;;;;;;
; JAVA
;;;;;;;;;;;;;;;;;;;;;;;;;
(add-hook 'java-mode-hook (lambda ()
                            (setq c-basic-offset 4)))

;;;;;;;;;;;;;;;;;;;;;;;;;
; PERL
;;;;;;;;;;;;;;;;;;;;;;;;;
(defalias 'perl-mode 'cperl-mode)

; Use 4 space indents via cperl mode
(custom-set-variables
  '(cperl-close-paren-offset -4)
  '(cperl-continued-statement-offset 4)
  '(cperl-indent-level 4)
  '(cperl-indent-parens-as-block t)
  '(cperl-tab-always-indent t)
)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Options Set via the Menu
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(inhibit-startup-screen t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
